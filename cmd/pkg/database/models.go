// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type AttendeesAttendence string

const (
	AttendeesAttendenceYes AttendeesAttendence = "Yes"
	AttendeesAttendenceNo  AttendeesAttendence = "No"
)

func (e *AttendeesAttendence) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AttendeesAttendence(s)
	case string:
		*e = AttendeesAttendence(s)
	default:
		return fmt.Errorf("unsupported scan type for AttendeesAttendence: %T", src)
	}
	return nil
}

type NullAttendeesAttendence struct {
	AttendeesAttendence AttendeesAttendence
	Valid               bool // Valid is true if AttendeesAttendence is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAttendeesAttendence) Scan(value interface{}) error {
	if value == nil {
		ns.AttendeesAttendence, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AttendeesAttendence.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAttendeesAttendence) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AttendeesAttendence), nil
}

type RolesName string

const (
	RolesNameSuperUser  RolesName = "super_user"
	RolesNameNormalUser RolesName = "normal_user"
)

func (e *RolesName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RolesName(s)
	case string:
		*e = RolesName(s)
	default:
		return fmt.Errorf("unsupported scan type for RolesName: %T", src)
	}
	return nil
}

type NullRolesName struct {
	RolesName RolesName
	Valid     bool // Valid is true if RolesName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRolesName) Scan(value interface{}) error {
	if value == nil {
		ns.RolesName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RolesName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRolesName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RolesName), nil
}

type SubscriptionsStatus string

const (
	SubscriptionsStatusActive    SubscriptionsStatus = "Active"
	SubscriptionsStatusInactive  SubscriptionsStatus = "Inactive"
	SubscriptionsStatusPending   SubscriptionsStatus = "Pending"
	SubscriptionsStatusCancelled SubscriptionsStatus = "Cancelled"
)

func (e *SubscriptionsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionsStatus(s)
	case string:
		*e = SubscriptionsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionsStatus: %T", src)
	}
	return nil
}

type NullSubscriptionsStatus struct {
	SubscriptionsStatus SubscriptionsStatus
	Valid               bool // Valid is true if SubscriptionsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionsStatus), nil
}

type Attendee struct {
	ID          int32
	FirstName   string
	LastName    string
	Email       string
	QrCode      sql.NullString
	CompanyName sql.NullString
	Title       sql.NullString
	TableNo     sql.NullInt32
	Role        sql.NullString
	Attendence  NullAttendeesAttendence
	EventID     int32
}

type AttendeesCustomField struct {
	ID         int32
	AttendeeID int32
	FieldName  sql.NullString
	FieldValue sql.NullString
	FieldType  sql.NullString
}

type Event struct {
	EventID     int32
	Title       string
	Description string
	StartDate   time.Time
	EndDate     time.Time
	Location    string
	UserID      int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Role struct {
	RoleID int8
	Name   RolesName
}

type Subscription struct {
	SubscriptionID int8
	Status         SubscriptionsStatus
}

type User struct {
	UserID         int32
	RoleID         int8
	FirstName      string
	LastName       string
	Email          string
	Password       string
	SubscriptionID int8
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Verify         bool
}
