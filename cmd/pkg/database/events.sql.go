// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package database

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
        title,
        description,
        start_date,
        end_date,
        location,
        user_id
    )
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateEventParams struct {
	Title       string
	Description string
	StartDate   time.Time
	EndDate     time.Time
	Location    string
	UserID      int32
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Location,
		arg.UserID,
	)
	return err
}

const deleteEventByID = `-- name: DeleteEventByID :exec
DELETE FROM events
WHERE event_id = ?
`

func (q *Queries) DeleteEventByID(ctx context.Context, eventID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEventByID, eventID)
	return err
}

const getAllEvents = `-- name: GetAllEvents :many
SELECT event_id, title, description, start_date, end_date, location, user_id, created_at, updated_at
FROM events
`

func (q *Queries) GetAllEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventByTitle = `-- name: GetEventByTitle :one
SELECT event_id, title, description, start_date, end_date, location, user_id, created_at, updated_at
FROM events
WHERE title = ?
`

func (q *Queries) GetEventByTitle(ctx context.Context, title string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByTitle, title)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEventByID = `-- name: UpdateEventByID :exec
UPDATE events
SET title = ?,
    description = ?,
    start_date = ?,
    end_date = ?,
    location = ?
WHERE event_id = ?
`

type UpdateEventByIDParams struct {
	Title       string
	Description string
	StartDate   time.Time
	EndDate     time.Time
	Location    string
	EventID     int32
}

func (q *Queries) UpdateEventByID(ctx context.Context, arg UpdateEventByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateEventByID,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Location,
		arg.EventID,
	)
	return err
}
